using System;
using System.Collections.Generic;
using System.Text;

namespace Wreb.Integration
{
    [Serializable]
    public abstract class Command : ICommand
    {

        public Command(string originUser, string originSystem, string commandAction, string connectionId, int? id, string clientId)
        {
            OriginUser = originUser;
            UniqueKey = Guid.NewGuid().ToString();
            OriginSystem = originSystem ?? throw new ArgumentNullException(nameof(originSystem));
            CommandAction = commandAction ?? throw new ArgumentNullException(nameof(commandAction));
            CreateDateTimeOffset = DateTimeOffset.Now;
            ConnectionId = connectionId;
            Id = id;
            ClientId = clientId;
        }

        /// <summary>
        /// The user Identity from the Client System (if available)
        /// </summary>
        public string OriginUser { get; set; }

        /// <summary>
        /// UniqueKey should be generated by the client and be Unique to this command. Used to ensure that the command carryed out only once.
        /// Commands that are issued with UniqueKeys that have already been used, will be rejected
        /// </summary>
        public string UniqueKey { get; set; }

        public string EndpointId { get; }

        /// <summary>
        /// he Client system is the System from which the Command is generated
        /// </summary>
        public string OriginSystem { get; set; }

        /// <summary>
        /// Way of Identifying what tyoe of action this Command will perform
        /// </summary>
        public string CommandAction { get; set; }

        /// <summary>
        /// Generated by the client when the Command is created,
        /// </summary>
        public DateTimeOffset CreateDateTimeOffset { get; set; }

        /// <summary>
        /// The ConnectionId is used to identfy the connecting client so that messages may be channeled back to the correct connection
        /// </summary>
        public string ConnectionId { get; set; }

        /// <summary>
        /// Can be used by the Client system to identify a unique instance of the command in the client system. This should be unique within the client but may be the same if
        /// generated by a different client. Can be used with the ClientId nd the ClientSystem to find a Unique command.
        /// </summary>
        public int? Id { get; set; }

        /// <summary>
        /// can be used to Identify a particular instance of a Client System
        /// </summary>
        public string ClientId { get; set; }

        public override bool Equals(object obj)
        {
            return obj is Command command &&
                   OriginUser == command.OriginUser &&
                   UniqueKey == command.UniqueKey &&
                   OriginSystem == command.OriginSystem &&
                   CommandAction == command.CommandAction &&
                   CreateDateTimeOffset.Equals(command.CreateDateTimeOffset) &&
                   ConnectionId == command.ConnectionId &&
                   Id == command.Id &&
                   ClientId == command.ClientId;
        }

        public override int GetHashCode()
        {
            var hashCode = 1079908969;
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(OriginUser);
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(UniqueKey);
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(OriginSystem);
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(CommandAction);
            hashCode = hashCode * -1521134295 + CreateDateTimeOffset.GetHashCode();
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(ConnectionId);
            hashCode = hashCode * -1521134295 + Id.GetHashCode();
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(ClientId);
            return hashCode;
        }

        public static class Actions
        {
            public const string Create = "Create";
            public const string Add = "Add";
            public const string Update = "Update";
            public const string Delete = "Delete";
        }
    }
}
